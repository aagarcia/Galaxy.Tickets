@attribute [Route(Rutas.EditarTicketsNav)]
@using Galaxy.Tickets.Dto.Request
@using Galaxy.Tickets.Dto.Request.Tickets
@using Galaxy.Tickets.Dto.Response.Tickets
@using Galaxy.Tickets.Dto.Response.Categorias
@using Galaxy.Tickets.Dto.Response.Prioridades
@using Galaxy.Tickets.Dto.Response.Usuarios
@using Galaxy.Tickets.Dto.Response.Estados
@using Galaxy.Tickets.Dto.Response.Comentarios
@inject ITicketServicio _ticketServicio
@inject ICategoriaServicio _categoriaServicio
@inject IPrioridadServicio _prioridadServicio
@inject IUsuarioServicio _usuarioServicio
@inject IEstadoServicio _estadoServicio
@inject IComentarioServicio _comentarioServicio
@inject IToastService Toast;
@inject NavigationManager Navegador;

<h3>Editar Ticket</h3>

<GroupBox Titulo="Datos del ticket" Class="mt-4">
    <Contenido>
        <EditForm Model="Request" OnValidSubmit="OnGuardar">
            <DataAnnotationsValidator />
            <div class="row g-3">
                <div class="col-lg-6 col-md-6 col-sm-12 w-100">
                    <label>Titulo:</label>
                    <input disabled class="form-control" value="@Response.Titulo" />
                </div>
            </div>
            <div class="row g-3">
                <div class="col-lg-6 col-md-6 col-sm-12 w-100">
                    <label>Descripcion:</label>
                    <textarea disabled class="form-control" value="@Response.Descripcion" />
                </div>
            </div>
            <div class="row g-3">
                <div class="col-lg-6 col-md-6 col-sm-12 w-100">
                    <label>Usuario Creador:</label>
                    <input disabled class="form-control" value="@Response.UsuarioCreador" />
                </div>
                <div class="col-lg-6 col-md-6 col-sm-12">
                    <label>Usuario Asignado:</label>
                    <select class="form-select" @bind="Request.IdUsuarioAsignado">
                        <option value="0">Selecccionar Usuario Asignado</option>
                        @foreach (var usuarioAsignado in LstUsuariosAsignados)
                        {
                            @if (Response.IdUsuarioAsignado == usuarioAsignado.Id)
                            {
                                <option selected value="@usuarioAsignado.Id">@usuarioAsignado.Nombre</option>
                            }
                            else
                            {
                                <option value="@usuarioAsignado.Id">@usuarioAsignado.Nombre</option>
                            }
                        }
                    </select>
                    <ValidationMessage For="() => Request.IdUsuarioAsignado" />
                </div>
                <div class="col-lg-6 col-md-6 col-sm-12">
                    <label>Categoria:</label>
                    <select class="form-select" @bind="Request.IdCategoria">
                        <option value="0">Selecccionar Categoria</option>
                        @foreach (var categoria in LstCategorias)
                        {
                            @if (Response.IdCategoria == categoria.Id)
                            {
                                <option selected value="@categoria.Id">@categoria.Nombre</option>
                            }
                            else
                            {
                                <option value="@categoria.Id">@categoria.Nombre</option>
                            }
                        }
                    </select>
                    <ValidationMessage For="() => Request.IdCategoria" />
                </div>
                <div class="col-lg-6 col-md-6 col-sm-12">
                    <label>Prioridad:</label>
                    <select class="form-select" @bind="Request.IdPrioridad">
                        <option value="0">Selecccionar Prioridad</option>
                        @foreach (var prioridad in LstPrioridades)
                        {
                            @if (Response.IdPrioridad == prioridad.Id)
                            {
                                <option selected value="@prioridad.Id">@prioridad.Nombre</option>
                            }
                            else
                            {
                                <option value="@prioridad.Id">@prioridad.Nombre</option>
                            }
                        }
                    </select>
                    <ValidationMessage For="() => Request.IdPrioridad" />
                </div>
                <div class="col-lg-6 col-md-6 col-sm-12">
                    <label>Estado:</label>
                    <select class="form-select" @bind="Request.IdEstado">
                        <option value="0">Selecccionar Estado</option>
                        @foreach (var estado in LstEstados)
                        {
                            @if (Response.IdEstado == estado.Id)
                            {
                                <option selected value="@estado.Id">@estado.Nombre</option>
                            }
                            else
                            {
                                <option value="@estado.Id">@estado.Nombre</option>
                            }
                        }
                    </select>
                    <ValidationMessage For="() => Request.IdEstado" />
                </div>
            </div>
            <div class="row g-3">
                <div class="col-lg-6 col-md-6 col-sm-12">
                    <label>Fecha Creacion:</label>
                    <input disabled class="form-control" value="@Response.FechaCreacion" />
                </div>
                @if (Response.FechaCierre != null)
                {
                    <div class="col-lg-6 col-md-6 col-sm-12">
                        <label>Fecha Cierre:</label>
                        <input disabled class="form-control" value="@Response.FechaCierre" />
                    </div>
                }
            </div>
            @if (Response.IdEstado != 3)
            {
                <div class="row g-3">
                    <div class="col-lg-6 col-md-6 col-sm-12 w-100">
                        <label>Comentario:</label>
                        <textarea class="form-control" @bind="Request.Comentario1" />
                    </div>
                </div>
            }
            @if (Response.IdEstado != 3)
            {
                <div class="row gx-4 mt-4">
                    <div class="col">

                        <button class="btn btn-primary" type="submit"><i class="bi bi-save"></i> Guardar</button>
                        <NavLink class="btn btn-danger" type="button" href="@Rutas.ListaTickets">Cancelar</NavLink>
                    </div>
                </div>
            }
            else
            {
                <div class="row g-3">
                    <div class="col-lg-6 col-md-6 col-sm-12 w-100">
                        <NavLink class="btn btn-danger" type="button" href="@Rutas.ListaTickets">Cancelar</NavLink>
                    </div>
                </div>
            }
        </EditForm>
    </Contenido>
</GroupBox>

@if (LstComentarios.Count > 0)
{
    <div class="row mt-3">
        <div class="table table-responsive">
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>Usuario</th>
                        <th>Comentario</th>
                        <th>Fecha Comentario</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in LstComentarios)
                    {
                        <tr>
                            <td>@item.NombreUsuario</td>
                            <td>@item.Comentario</td>
                            <td>@item.FechaCreacion</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <Paginacion Result="PaginacionRequest" OnPageChanged="OnPaginar" OnPageSizeChanged="OnPaginar" />
}

<Loading IsLoading="IsLoading" />

@code 
{
    [Parameter]
    public int id { get; set; }

    public TicketEditRequest Request { get; set; } = new();
    public TicketResponse Response { get; set; } = new();
    public List<CategoriaResponse> LstCategorias { get; set; } = new();
    public List<PrioridadResponse> LstPrioridades { get; set; } = new();
    public List<EstadoResponse> LstEstados { get; set; } = new();
    public List<UsuarioResponse> LstUsuariosAsignados { get; set; } = new();
    public ICollection<ListaComentarioResponse> LstComentarios { get; set; } = new List<ListaComentarioResponse>();
    public bool IsLoading { get; set; }
    public PaginadorRequest PaginacionRequest { get; set; } = new();
    public PaginacionRequest Paginacion { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await ListarCategorias();
        await ListarPrioridades();
        await ListarEstados();
        await ListarUsuariosAsignados();
        await ObtenerPorId();
        await ListarComentarios();
    }

    public async Task ObtenerPorId()
    {
        IsLoading = true;

        try
        {
            var resultado = await _ticketServicio.ObtenerPorId(id);

            if (resultado != null && resultado.Data != null)
            {
                Response = resultado.Data;
                Request = new()
                {
                    IdUsuarioAsignado = Response.IdUsuarioAsignado,
                    IdCategoria = Response.IdCategoria,
                    IdPrioridad = Response.IdPrioridad,
                    IdEstado = Response.IdEstado
                };
            }
        }
        catch (Exception ex)
        {
            Toast.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    public async Task ListarComentarios()
    {
        IsLoading = true;

        try
        {
            var resultado = await _comentarioServicio.Listar(id, Paginacion);

            if (resultado != null && resultado.Data != null)
            {
                LstComentarios = resultado.Data;
                PaginacionRequest = new()
                {
                    FilasPorPagina = Paginacion.Filas,
                    PaginaActual = Paginacion.Pagina,
                    TotalPaginas = resultado.TotalPaginas,
                    TotalRegistros = resultado.TotalFilas
                };
            }
        }
        catch (Exception ex)
        {
            Toast.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    public async Task OnGuardar()
    {
        IsLoading = true;

        try
        {
            if (Request.IdEstado == 3)
            {
                Request.FechaCierre = DateTime.Now;
            }

            var resultado = await _ticketServicio.Actualizar(id, Request);

            if (resultado.Success)
            {
                Toast.ShowSuccess("Ticket actualizado correctamente");
                Request.Comentario1 = string.Empty;
                if (Request.IdEstado == 3)
                {
                    Navegador.NavigateTo(Rutas.ListaTickets);
                    return;
                }
                await ListarComentarios();
            }
            else
            {
                Toast.ShowError("No se pudo actualizar el ticket");
            }
        }
        catch (Exception ex)
        {
            Toast.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    public async Task OnPaginar()
    {
        Paginacion.Pagina = PaginacionRequest.PaginaActual;
        Paginacion.Filas = PaginacionRequest.FilasPorPagina;
        await ListarComentarios();
    }

    public async Task ListarCategorias()
    {
        IsLoading = true;

        try
        {
            var resultado = await _categoriaServicio.ListarTodos();

            if (resultado != null)
            {
                LstCategorias = resultado.Data!;
            }
        }
        catch (Exception ex)
        {
            Toast.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    public async Task ListarPrioridades()
    {
        IsLoading = true;

        try
        {
            var resultado = await _prioridadServicio.ListarTodos();

            if (resultado != null)
            {
                LstPrioridades = resultado.Data!;
            }
        }
        catch (Exception ex)
        {
            Toast.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    public async Task ListarEstados()
    {
        IsLoading = true;

        try
        {
            var resultado = await _estadoServicio.ListarTodos();

            if (resultado != null)
            {
                LstEstados = resultado.Data!;
            }
        }
        catch (Exception ex)
        {
            Toast.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    public async Task ListarUsuariosAsignados()
    {
        IsLoading = true;

        try
        {
            var resultado = await _usuarioServicio.ListarTodosSoportes();

            if (resultado != null)
            {
                LstUsuariosAsignados = resultado.Data!;
            }
        }
        catch (Exception ex)
        {
            Toast.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }
}
