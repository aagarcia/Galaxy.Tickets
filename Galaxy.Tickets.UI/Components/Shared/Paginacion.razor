@using Galaxy.Tickets.Dto.Request

@if (Result == null)
{
    <p>&nbsp;</p>
}
else
{
    <div class="row pb-5 d-flex justify-content-between align-items-center">
        <div class="col-md-4 d-flex align-items-center">
            @if (Result.TotalPaginas >= 1)
            {
                <ul class="pagination m-0">
                    <li class="page-item">
                        <button class="btn btn-outline-primary" @onclick="OnPreviousClicked">
                            <i class="bi bi-chevron-double-left"></i>
                        </button>
                    </li>
                    @if (StartPageIndex > 1)
                    {
                        <li class="page-item">
                            <button class="btn btn-outline-primary" type="button" @onclick="OnPreviousGroupClicked">...</button>
                        </li>
                    }
                    @for (int index = StartPageIndex; index <= EndPageIndex; index++)
                    {
                        var currentIndex = index;
                        @if (Result.PaginaActual == index)
                        {
                            <li class="page-item active">
                                <button class="btn btn-primary">@index</button>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <button class="btn btn-outline-primary" type="button" @onclick="() => OnPageClicked(currentIndex)">
                                    @index
                                </button>
                            </li>
                        }
                    }
                    @if (EndPageIndex < Result.TotalPaginas)
                    {
                        <li class="page-item">
                            <button class="btn btn-outline-primary" type="button" @onclick="OnNextGroupClicked">...</button>
                        </li>
                    }
                    <li class="page-item">
                        <button class="btn btn-outline-primary" @onclick="OnNextClicked">
                            <i class="bi bi-chevron-double-right"></i>
                        </button>
                    </li>
                </ul>
            }
        </div>

        <!-- Selector de cantidad de registros por página centrado -->
        <div class="col-md-4 text-center">

            <select class="form-select d-inline w-auto" @onchange="PaginationSizeChanged">
                <option>5</option>
                <option selected>10</option>
                <option>20</option>
                <option>50</option>
            </select>
            Registros por página
        </div>

        <!-- Información de la página actual y total de registros a la derecha -->
        <div class="col-md-4 text-end">
            @* Calculo del rango de registros *@
            @{
                int startRecord = ((Result.PaginaActual - 1) * Result.FilasPorPagina) + 1;
                int endRecord = Math.Min(Result.PaginaActual * Result.FilasPorPagina, Result.TotalRegistros);
            }
            Mostrando @startRecord - @endRecord de @Result.TotalRegistros registros.
        </div>
    </div>
}

@code {

    private const int MaxPageButtons = 5;
    private int StartPageIndex => Result == null ? 0 : Math.Max(1, Result.PaginaActual - MaxPageButtons / 2);
    private int EndPageIndex => Result == null ? 0 : Math.Min(Result.TotalPaginas, StartPageIndex + MaxPageButtons - 1);

    [Parameter] public PaginadorRequest? Result { get; set; }

    [Parameter]
    public EventCallback OnPageChanged { get; set; }

    [Parameter]
    public EventCallback OnPageSizeChanged { get; set; }

    private async Task OnPreviousClicked()
    {
        if (Result?.PaginaActual > 1)
        {
            Result.PaginaActual--;
            await OnPageChanged.InvokeAsync();
        }
    }

    private async Task OnNextClicked()
    {
        if (Result?.PaginaActual < Result?.TotalPaginas)
        {
            Result.PaginaActual++;
            await OnPageChanged.InvokeAsync();
        }
    }

    private async Task OnPageClicked(int page)
    {
        if (Result is null) return;
        Result.PaginaActual = page;
        await OnPageChanged.InvokeAsync();
    }

    private void OnPageSizeClicked(int size)
    {
        if (Result is null) return;
        Result.FilasPorPagina = size;
        OnPageSizeChanged.InvokeAsync();
    }

    private void PaginationSizeChanged(ChangeEventArgs e)
    {
        if (e.Value is null) return;
        var size = int.Parse(e.Value.ToString() ?? "5");
        OnPageSizeClicked(size);
    }

    private async Task OnPreviousGroupClicked()
    {
        if (Result!.PaginaActual > MaxPageButtons)
        {
            Result.PaginaActual = StartPageIndex - 1;
        }
        else
        {
            Result.PaginaActual = 1;
        }
        await OnPageChanged.InvokeAsync();
    }

    private async Task OnNextGroupClicked()
    {
        if (EndPageIndex < Result!.TotalPaginas)
        {
            Result.PaginaActual = EndPageIndex + 1;
        }
        else
        {
            Result.PaginaActual = Result.TotalPaginas;
        }
        await OnPageChanged.InvokeAsync();
    }

}